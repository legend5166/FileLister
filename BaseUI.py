#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Sun Jan 19 10:55:18 2025
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class FileListBaseUIDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: FileListBaseUIDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetTitle(u"生成文件清单")

		sizer_h = wx.BoxSizer(wx.HORIZONTAL)

		sizer_v_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_h.Add(sizer_v_1, 1, wx.ALL, 5)

		sizer_1_h = wx.BoxSizer(wx.HORIZONTAL)
		sizer_v_1.Add(sizer_1_h, 1, wx.EXPAND, 0)

		label_folder = wx.StaticText(self, wx.ID_ANY, u"目标文件夹(&P)")
		sizer_1_h.Add(label_folder, 0, 0, 0)

		self.tc_folder_path = wx.TextCtrl(self, wx.ID_ANY, "")
		sizer_1_h.Add(self.tc_folder_path, 0, 0, 0)

		self.btn_browse = wx.Button(self, wx.ID_ANY, u"浏览(&B)")
		sizer_1_h.Add(self.btn_browse, 0, 0, 0)

		sizer_2_h = wx.BoxSizer(wx.HORIZONTAL)
		sizer_v_1.Add(sizer_2_h, 1, wx.EXPAND, 0)

		self.rb_priority = wx.RadioBox(self, wx.ID_ANY, u"文件顺序(&O)", choices=[u"根目录文件在前", u"子文件夹文件在前", u"仅根目录的文件"], majorDimension=3, style=wx.RA_SPECIFY_COLS)
		self.rb_priority.SetSelection(0)
		sizer_2_h.Add(self.rb_priority, 0, 0, 0)

		sizer_3_h = wx.BoxSizer(wx.HORIZONTAL)
		sizer_v_1.Add(sizer_3_h, 1, wx.EXPAND, 0)

		self.rb_filename = wx.RadioBox(self, wx.ID_ANY, u"文件名显示(&T)", choices=[u"仅文件名", u"相对路径", u"绝对路径"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
		self.rb_filename.SetSelection(0)
		sizer_3_h.Add(self.rb_filename, 0, 0, 0)

		sizer_4_h = wx.BoxSizer(wx.HORIZONTAL)
		sizer_v_1.Add(sizer_4_h, 1, wx.EXPAND, 0)

		self.rb_file_type = wx.RadioBox(self, wx.ID_ANY, u"文件类型", choices=[u"指定的文件类型", u"排除的文件类型"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
		self.rb_file_type.SetSelection(0)
		sizer_4_h.Add(self.rb_file_type, 1, 0, 0)

		sizer_1_v = wx.BoxSizer(wx.VERTICAL)
		sizer_4_h.Add(sizer_1_v, 1, wx.EXPAND, 0)

		self.lb_file_type = wx.StaticText(self, wx.ID_ANY, u"指定的文件类型[留空包含所有类型](&T)")
		sizer_1_v.Add(self.lb_file_type, 0, 0, 0)

		self.tc_file_type = wx.TextCtrl(self, wx.ID_ANY, "")
		sizer_1_v.Add(self.tc_file_type, 0, 0, 0)

		sizer_5h = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"文件属性"), wx.HORIZONTAL)
		sizer_v_1.Add(sizer_5h, 1, wx.EXPAND, 0)

		self.checkbox_size = wx.CheckBox(self, wx.ID_ANY, u"大小")
		sizer_5h.Add(self.checkbox_size, 0, 0, 0)

		self.checkbox_create = wx.CheckBox(self, wx.ID_ANY, u"创建时间")
		sizer_5h.Add(self.checkbox_create, 0, 0, 0)

		self.checkbox_modify = wx.CheckBox(self, wx.ID_ANY, u"修改时间")
		sizer_5h.Add(self.checkbox_modify, 0, 0, 0)

		self.checkbox_access = wx.CheckBox(self, wx.ID_ANY, u"访问时间")
		sizer_5h.Add(self.checkbox_access, 0, 0, 0)

		sizer_btn = wx.StdDialogButtonSizer()
		sizer_v_1.Add(sizer_btn, 0, wx.ALL, 4)

		self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
		self.button_OK.SetDefault()
		self.button_OK.SetLabel('确定(&O)')
		sizer_btn.Add(self.button_OK, 0, 0, 0)

		self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
		self.button_CANCEL.SetLabel('取消(&C)')
		sizer_btn.AddButton(self.button_CANCEL)

		sizer_v_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_h.Add(sizer_v_2, 1, wx.ALL | wx.EXPAND, 5)

		self.folder_tree = wx.TreeCtrl(self, wx.ID_ANY)
		sizer_v_2.Add(self.folder_tree, 1, wx.EXPAND, 0)

		sizer_btn.Realize()

		self.SetSizer(sizer_h)
		sizer_h.Fit(self)
		sizer_h.SetSizeHints(self)

		self.SetEscapeId(self.button_CANCEL.GetId())

		self.Layout()
		self.Centre()

		self.Bind(wx.EVT_BUTTON, self.OnBrowseBtn, self.btn_browse)
		self.Bind(wx.EVT_RADIOBOX, self.OnPriorityRB, self.rb_priority)
		self.Bind(wx.EVT_RADIOBOX, self.OnFileTypeRb, self.rb_file_type)
		self.Bind(wx.EVT_BUTTON, self.OnGenerateFilelistBtn, self.button_OK)
		# end wxGlade

	def OnBrowseBtn(self, event):  # wxGlade: FileListBaseUIDialog.<event_handler>
		print("Event handler 'OnBrowseBtn' not implemented!")
		event.Skip()

	def OnPriorityRB(self, event):  # wxGlade: FileListBaseUIDialog.<event_handler>
		print("Event handler 'OnPriorityRB' not implemented!")
		event.Skip()

	def OnFileTypeRb(self, event):  # wxGlade: FileListBaseUIDialog.<event_handler>
		print("Event handler 'OnFileTypeRb' not implemented!")
		event.Skip()

	def OnGenerateFilelistBtn(self, event):  # wxGlade: FileListBaseUIDialog.<event_handler>
		print("Event handler 'OnGenerateFilelistBtn' not implemented!")
		event.Skip()

# end of class FileListBaseUIDialog

class ShowFileListDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: ShowFileListDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((1440, 900))
		self.SetTitle(u"文件清单")

		sizer_h = wx.BoxSizer(wx.HORIZONTAL)

		sizer_v_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_h.Add(sizer_v_1, 12, wx.ALL | wx.EXPAND, 5)

		self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH2)
		self.text_ctrl_1.SetMinSize((700, 1100))
		sizer_v_1.Add(self.text_ctrl_1, 0, 0, 0)

		sizer_v_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_h.Add(sizer_v_2, 1, wx.ALL, 5)

		self.btn_copy = wx.Button(self, wx.ID_ANY, u"复制到剪贴板(&C)")
		sizer_v_2.Add(self.btn_copy, 0, wx.ALL, 5)

		self.btn_txt = wx.Button(self, wx.ID_ANY, u"保存为 txt(&T)")
		sizer_v_2.Add(self.btn_txt, 0, wx.ALL, 5)

		self.btn_csv = wx.Button(self, wx.ID_ANY, u"保存为 csv(&S)")
		sizer_v_2.Add(self.btn_csv, 0, wx.ALL, 5)

		self.btn_close = wx.Button(self, wx.ID_CLOSE, "")
		self.btn_close.SetDefault()
		self.btn_close.SetLabel('关闭(&X)')
		sizer_v_2.Add(self.btn_close, 0, 0, 0)

		self.SetSizer(sizer_h)
		sizer_h.SetSizeHints(self)

		self.SetAffirmativeId(self.btn_close.GetId())

		self.Layout()
		self.Centre()

		self.Bind(wx.EVT_BUTTON, self.OnCopyBtn, self.btn_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSaveTxtBtn, self.btn_txt)
		self.Bind(wx.EVT_BUTTON, self.OnSaveCsvBtn, self.btn_csv)
		# end wxGlade

	def OnCopyBtn(self, event):  # wxGlade: ShowFileListDialog.<event_handler>
		print("Event handler 'OnCopyBtn' not implemented!")
		event.Skip()

	def OnSaveTxtBtn(self, event):  # wxGlade: ShowFileListDialog.<event_handler>
		print("Event handler 'OnSaveTxtBtn' not implemented!")
		event.Skip()

	def OnSaveCsvBtn(self, event):  # wxGlade: ShowFileListDialog.<event_handler>
		print("Event handler 'OnSaveCsvBtn' not implemented!")
		event.Skip()

# end of class ShowFileListDialog

class MyApp(wx.App):
	def OnInit(self):
		self.dialog_1 = ShowFileListDialog(None, wx.ID_ANY, "")
		self.SetTopWindow(self.dialog_1)
		self.dialog_1.ShowModal()
		self.dialog_1.Destroy()
		return True

# end of class MyApp

if __name__ == "__main__":
	app = MyApp(0)
	app.MainLoop()
